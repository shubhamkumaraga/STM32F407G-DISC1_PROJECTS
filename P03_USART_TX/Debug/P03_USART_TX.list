
P03_USART_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003f8  080003f8  00010400  2**0
                  CONTENTS
  4 .ARM          00000000  080003f8  080003f8  00010400  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f8  08000400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010400  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004e2  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000015c  00000000  00000000  00010912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a2fd  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000052f  00000000  00000000  0001ae25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00037a3c  00000000  00000000  0001b354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00052d90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000ec  00000000  00000000  00052de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003d8 	.word	0x080003d8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003d8 	.word	0x080003d8

080001e8 <main>:
static uint16_t compute_uart2_bd(uint32_t PeriphCLK,uint32_t Baudrate);
void USART_WriteChar(char ch);
void USART_WriteStr(char *ch);

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	USART_Config();
 80001ec:	f000 f80a 	bl	8000204 <USART_Config>

	while(1)
	{
		USART_WriteStr("SHUBHAM");
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <main+0x18>)
 80001f2:	f000 f88d 	bl	8000310 <USART_WriteStr>
		USART_WriteChar(' ');
 80001f6:	2020      	movs	r0, #32
 80001f8:	f000 f870 	bl	80002dc <USART_WriteChar>
		USART_WriteStr("SHUBHAM");
 80001fc:	e7f8      	b.n	80001f0 <main+0x8>
 80001fe:	bf00      	nop
 8000200:	080003f0 	.word	0x080003f0

08000204 <USART_Config>:
	}
}

void USART_Config(void)
{
 8000204:	b598      	push	{r3, r4, r7, lr}
 8000206:	af00      	add	r7, sp, #0
	// ENABLE GPIOA CLOCK
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000208:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <USART_Config+0xa0>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a25      	ldr	r2, [pc, #148]	; (80002a4 <USART_Config+0xa0>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	// SET PINS AS ALTERNATE FUNCTION MODE
	GPIOA->MODER &= ~(1<<4);
 8000214:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <USART_Config+0xa4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a23      	ldr	r2, [pc, #140]	; (80002a8 <USART_Config+0xa4>)
 800021a:	f023 0310 	bic.w	r3, r3, #16
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<5);
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <USART_Config+0xa4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <USART_Config+0xa4>)
 8000226:	f043 0320 	orr.w	r3, r3, #32
 800022a:	6013      	str	r3, [r2, #0]

	// PA2 - USART2_TX, PA3 - USART2_RX (AF7)
	// SET THE ALTERNATE FUNCTION LOW REGISTER
	GPIOA->AFR[0] |= (1<<8);
 800022c:	4b1e      	ldr	r3, [pc, #120]	; (80002a8 <USART_Config+0xa4>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a1d      	ldr	r2, [pc, #116]	; (80002a8 <USART_Config+0xa4>)
 8000232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000236:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<9);
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <USART_Config+0xa4>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <USART_Config+0xa4>)
 800023e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000242:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<10);
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <USART_Config+0xa4>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a17      	ldr	r2, [pc, #92]	; (80002a8 <USART_Config+0xa4>)
 800024a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800024e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <USART_Config+0xa4>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <USART_Config+0xa4>)
 8000256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800025a:	6213      	str	r3, [r2, #32]

	// ENABLE USART2 CLOCK
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <USART_Config+0xa0>)
 800025e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000260:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <USART_Config+0xa0>)
 8000262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000266:	6413      	str	r3, [r2, #64]	; 0x40

	// SET BRR, TE, RE, UE
	USART2->BRR = compute_uart2_bd(APB1_CLK,UART2_BAUDRATE); // 0x445C;
 8000268:	4c10      	ldr	r4, [pc, #64]	; (80002ac <USART_Config+0xa8>)
 800026a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800026e:	4810      	ldr	r0, [pc, #64]	; (80002b0 <USART_Config+0xac>)
 8000270:	f000 f820 	bl	80002b4 <compute_uart2_bd>
 8000274:	4603      	mov	r3, r0
 8000276:	8123      	strh	r3, [r4, #8]
	USART2->CR1 = 0x00;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <USART_Config+0xa8>)
 800027a:	2200      	movs	r2, #0
 800027c:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= (1<<3);
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <USART_Config+0xa8>)
 8000280:	899b      	ldrh	r3, [r3, #12]
 8000282:	b29b      	uxth	r3, r3
 8000284:	4a09      	ldr	r2, [pc, #36]	; (80002ac <USART_Config+0xa8>)
 8000286:	f043 0308 	orr.w	r3, r3, #8
 800028a:	b29b      	uxth	r3, r3
 800028c:	8193      	strh	r3, [r2, #12]
	USART2->CR1 |= (1<<13);
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <USART_Config+0xa8>)
 8000290:	899b      	ldrh	r3, [r3, #12]
 8000292:	b29b      	uxth	r3, r3
 8000294:	4a05      	ldr	r2, [pc, #20]	; (80002ac <USART_Config+0xa8>)
 8000296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800029a:	b29b      	uxth	r3, r3
 800029c:	8193      	strh	r3, [r2, #12]
}
 800029e:	bf00      	nop
 80002a0:	bd98      	pop	{r3, r4, r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020000 	.word	0x40020000
 80002ac:	40004400 	.word	0x40004400
 80002b0:	00f42400 	.word	0x00f42400

080002b4 <compute_uart2_bd>:

static uint16_t compute_uart2_bd(uint32_t PeriphCLK,uint32_t Baudrate)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
	return ((PeriphCLK+(Baudrate/2U))/Baudrate);
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	085a      	lsrs	r2, r3, #1
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	441a      	add	r2, r3
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	b29b      	uxth	r3, r3
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <USART_WriteChar>:

void USART_WriteChar(char ch)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & (1<<7)));
 80002e6:	bf00      	nop
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <USART_WriteChar+0x30>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f8      	beq.n	80002e8 <USART_WriteChar+0xc>
	USART2->DR = (ch & 0xFF);
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <USART_WriteChar+0x30>)
 80002f8:	79fa      	ldrb	r2, [r7, #7]
 80002fa:	b292      	uxth	r2, r2
 80002fc:	809a      	strh	r2, [r3, #4]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40004400 	.word	0x40004400

08000310 <USART_WriteStr>:

void USART_WriteStr(char *ch)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	while(*ch)
 8000318:	e006      	b.n	8000328 <USART_WriteStr+0x18>
	{
		USART_WriteChar(*ch++);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	1c5a      	adds	r2, r3, #1
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ffda 	bl	80002dc <USART_WriteChar>
	while(*ch)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d1f4      	bne.n	800031a <USART_WriteStr+0xa>
	}
}
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000340:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f000 f811 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ff3b 	bl	80001e8 <main>

08000372 <LoopForever>:

LoopForever:
    b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000380:	08000400 	.word	0x08000400
  ldr r2, =_sbss
 8000384:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000388:	2000001c 	.word	0x2000001c

0800038c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC_IRQHandler>
	...

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	4d0d      	ldr	r5, [pc, #52]	; (80003c8 <__libc_init_array+0x38>)
 8000394:	4c0d      	ldr	r4, [pc, #52]	; (80003cc <__libc_init_array+0x3c>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	2600      	movs	r6, #0
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	4d0b      	ldr	r5, [pc, #44]	; (80003d0 <__libc_init_array+0x40>)
 80003a2:	4c0c      	ldr	r4, [pc, #48]	; (80003d4 <__libc_init_array+0x44>)
 80003a4:	f000 f818 	bl	80003d8 <_init>
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	2600      	movs	r6, #0
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	080003f8 	.word	0x080003f8
 80003cc:	080003f8 	.word	0x080003f8
 80003d0:	080003f8 	.word	0x080003f8
 80003d4:	080003fc 	.word	0x080003fc

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
