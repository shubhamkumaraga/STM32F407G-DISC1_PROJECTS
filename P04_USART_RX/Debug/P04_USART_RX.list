
P04_USART_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d4  080003dc  000103dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  000103dc  2**0
                  CONTENTS
  4 .ARM          00000000  080003d4  080003d4  000103dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d4  080003dc  000103dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103dc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004c0  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000140  00000000  00000000  000108cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a2fd  00000000  00000000  00010ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004f5  00000000  00000000  0001adb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00037a28  00000000  00000000  0001b2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00052cd2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c4  00000000  00000000  00052d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003bc 	.word	0x080003bc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003bc 	.word	0x080003bc

080001e8 <main>:
void USART_Config(void);
static uint16_t compute_uart2_bd(uint32_t PeriphCLK,uint32_t Baudrate);
char USART_Read(void);

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	USART_Config();
 80001ee:	f000 f81b 	bl	8000228 <USART_Config>

	while(1)
	{
		char c;
		c = USART_Read();
 80001f2:	f000 f887 	bl	8000304 <USART_Read>
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
		if(c == 'A')
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b41      	cmp	r3, #65	; 0x41
 80001fe:	d106      	bne.n	800020e <main+0x26>
			GPIOD->ODR |= (1<<13);
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <main+0x3c>)
 8000202:	695b      	ldr	r3, [r3, #20]
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <main+0x3c>)
 8000206:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800020a:	6153      	str	r3, [r2, #20]
 800020c:	e7f1      	b.n	80001f2 <main+0xa>
		else if(c == 'B')
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	2b42      	cmp	r3, #66	; 0x42
 8000212:	d1ee      	bne.n	80001f2 <main+0xa>
			GPIOD->ODR &= ~(1<<13);
 8000214:	4b03      	ldr	r3, [pc, #12]	; (8000224 <main+0x3c>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a02      	ldr	r2, [pc, #8]	; (8000224 <main+0x3c>)
 800021a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800021e:	6153      	str	r3, [r2, #20]
	{
 8000220:	e7e7      	b.n	80001f2 <main+0xa>
 8000222:	bf00      	nop
 8000224:	40020c00 	.word	0x40020c00

08000228 <USART_Config>:
	}
}

void USART_Config(void)
{
 8000228:	b598      	push	{r3, r4, r7, lr}
 800022a:	af00      	add	r7, sp, #0
	// ENABLE GPIOA CLOCK
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIODEN;
 800022c:	4b26      	ldr	r3, [pc, #152]	; (80002c8 <USART_Config+0xa0>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a25      	ldr	r2, [pc, #148]	; (80002c8 <USART_Config+0xa0>)
 8000232:	f043 0309 	orr.w	r3, r3, #9
 8000236:	6313      	str	r3, [r2, #48]	; 0x30

	// SET PD13 (BUILT IN LED) AS OUTPUT PIN
	GPIOD->MODER |= (1<<26);
 8000238:	4b24      	ldr	r3, [pc, #144]	; (80002cc <USART_Config+0xa4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a23      	ldr	r2, [pc, #140]	; (80002cc <USART_Config+0xa4>)
 800023e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000242:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<27);
 8000244:	4b21      	ldr	r3, [pc, #132]	; (80002cc <USART_Config+0xa4>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a20      	ldr	r2, [pc, #128]	; (80002cc <USART_Config+0xa4>)
 800024a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800024e:	6013      	str	r3, [r2, #0]

	// PA2 - USART2_TX, PA3 - USART2_RX (AF7)
	// SET PINS AS ALTERNATE FUNCTION MODE
	// GPIOA->MODER &= ~(1<<4);
	// GPIOA->MODER |= (1<<5);
	GPIOA->MODER &= ~(1<<6);
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <USART_Config+0xa8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a1e      	ldr	r2, [pc, #120]	; (80002d0 <USART_Config+0xa8>)
 8000256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800025a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<7);
 800025c:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <USART_Config+0xa8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a1b      	ldr	r2, [pc, #108]	; (80002d0 <USART_Config+0xa8>)
 8000262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000266:	6013      	str	r3, [r2, #0]

	// SET THE ALTERNATE FUNCTION LOW REGISTER
	// GPIOA->AFR[0] |= (7<<8);
	// GPIOA->AFR[0] &= ~(1<<11);
	GPIOA->AFR[0] |= (7<<12);
 8000268:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <USART_Config+0xa8>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a18      	ldr	r2, [pc, #96]	; (80002d0 <USART_Config+0xa8>)
 800026e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000272:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<15);
 8000274:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <USART_Config+0xa8>)
 8000276:	6a1b      	ldr	r3, [r3, #32]
 8000278:	4a15      	ldr	r2, [pc, #84]	; (80002d0 <USART_Config+0xa8>)
 800027a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800027e:	6213      	str	r3, [r2, #32]

	// ENABLE USART2 CLOCK
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <USART_Config+0xa0>)
 8000282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000284:	4a10      	ldr	r2, [pc, #64]	; (80002c8 <USART_Config+0xa0>)
 8000286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800028a:	6413      	str	r3, [r2, #64]	; 0x40

	// SET BRR, RE, UE
	USART2->BRR = compute_uart2_bd(APB1_CLK,UART2_BAUDRATE);
 800028c:	4c11      	ldr	r4, [pc, #68]	; (80002d4 <USART_Config+0xac>)
 800028e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000292:	4811      	ldr	r0, [pc, #68]	; (80002d8 <USART_Config+0xb0>)
 8000294:	f000 f822 	bl	80002dc <compute_uart2_bd>
 8000298:	4603      	mov	r3, r0
 800029a:	8123      	strh	r3, [r4, #8]
	USART2->CR1 = 0x00;
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <USART_Config+0xac>)
 800029e:	2200      	movs	r2, #0
 80002a0:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= (1<<2); // Enable USART2 Receiver
 80002a2:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <USART_Config+0xac>)
 80002a4:	899b      	ldrh	r3, [r3, #12]
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <USART_Config+0xac>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	8193      	strh	r3, [r2, #12]
	// USART2->CR1 |= (1<<3); // Enable USART2 Transmitter
	USART2->CR1 |= (1<<13); // Enable USART2
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <USART_Config+0xac>)
 80002b4:	899b      	ldrh	r3, [r3, #12]
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <USART_Config+0xac>)
 80002ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002be:	b29b      	uxth	r3, r3
 80002c0:	8193      	strh	r3, [r2, #12]
}
 80002c2:	bf00      	nop
 80002c4:	bd98      	pop	{r3, r4, r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020c00 	.word	0x40020c00
 80002d0:	40020000 	.word	0x40020000
 80002d4:	40004400 	.word	0x40004400
 80002d8:	00f42400 	.word	0x00f42400

080002dc <compute_uart2_bd>:

static uint16_t compute_uart2_bd(uint32_t PeriphCLK,uint32_t Baudrate)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
	return ((PeriphCLK+(Baudrate/2U))/Baudrate);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	085a      	lsrs	r2, r3, #1
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	441a      	add	r2, r3
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	b29b      	uxth	r3, r3
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
	...

08000304 <USART_Read>:

char USART_Read(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
    // while(!(USART2->SR & (1<<5))); // Wait for data to be received
    return USART2->DR;
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <USART_Read+0x18>)
 800030a:	889b      	ldrh	r3, [r3, #4]
 800030c:	b29b      	uxth	r3, r3
 800030e:	b2db      	uxtb	r3, r3
}
 8000310:	4618      	mov	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40004400 	.word	0x40004400

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 f811 	bl	8000374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ff49 	bl	80001e8 <main>

08000356 <LoopForever>:

LoopForever:
    b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000364:	080003dc 	.word	0x080003dc
  ldr r2, =_sbss
 8000368:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800036c:	2000001c 	.word	0x2000001c

08000370 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC_IRQHandler>
	...

08000374 <__libc_init_array>:
 8000374:	b570      	push	{r4, r5, r6, lr}
 8000376:	4d0d      	ldr	r5, [pc, #52]	; (80003ac <__libc_init_array+0x38>)
 8000378:	4c0d      	ldr	r4, [pc, #52]	; (80003b0 <__libc_init_array+0x3c>)
 800037a:	1b64      	subs	r4, r4, r5
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	2600      	movs	r6, #0
 8000380:	42a6      	cmp	r6, r4
 8000382:	d109      	bne.n	8000398 <__libc_init_array+0x24>
 8000384:	4d0b      	ldr	r5, [pc, #44]	; (80003b4 <__libc_init_array+0x40>)
 8000386:	4c0c      	ldr	r4, [pc, #48]	; (80003b8 <__libc_init_array+0x44>)
 8000388:	f000 f818 	bl	80003bc <_init>
 800038c:	1b64      	subs	r4, r4, r5
 800038e:	10a4      	asrs	r4, r4, #2
 8000390:	2600      	movs	r6, #0
 8000392:	42a6      	cmp	r6, r4
 8000394:	d105      	bne.n	80003a2 <__libc_init_array+0x2e>
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f855 3b04 	ldr.w	r3, [r5], #4
 800039c:	4798      	blx	r3
 800039e:	3601      	adds	r6, #1
 80003a0:	e7ee      	b.n	8000380 <__libc_init_array+0xc>
 80003a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a6:	4798      	blx	r3
 80003a8:	3601      	adds	r6, #1
 80003aa:	e7f2      	b.n	8000392 <__libc_init_array+0x1e>
 80003ac:	080003d4 	.word	0x080003d4
 80003b0:	080003d4 	.word	0x080003d4
 80003b4:	080003d4 	.word	0x080003d4
 80003b8:	080003d8 	.word	0x080003d8

080003bc <_init>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

080003c8 <_fini>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr
