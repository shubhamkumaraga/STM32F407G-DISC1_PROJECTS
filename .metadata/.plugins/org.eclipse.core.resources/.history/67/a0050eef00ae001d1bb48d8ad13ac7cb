#include <stm32f4xx.h>

#define SYS_FREQ 16000000
#define APB1_CLK SYS_FREQ
#define UART2_BAUDRATE 115200

void USART_Config(void);
static uint16_t compute_uart2_bd(uint32_t PeriphCLK,uint32_t Baudrate);
char USART_Read(void);

int main(void)
{
	char c;
	USART_Config();
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;

	while(1)
	{
		c = USART_Read();
		if(c == 'A')
			GPIOD->ODR |= (1<<13);
		else
			GPIOD->ODR &= ~(1<<13);
	}
}

void USART_Config(void)
{
	// ENABLE GPIOA CLOCK
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

	// SET PINS AS ALTERNATE FUNCTION MODE
	GPIOA->MODER &= ~(1<<6);
	GPIOA->MODER |= (1<<7);

	// PA2 - USART2_TX, PA3 - USART2_RX (AF7)
	// SET THE ALTERNATE FUNCTION LOW REGISTER PA3 - 0111
	GPIOA->AFR[0] |= (1<<12);
	GPIOA->AFR[0] |= (1<<13);
	GPIOA->AFR[0] |= (1<<14);
	GPIOA->AFR[0] &= ~(1<<15);

	// ENABLE USART2 CLOCK
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;

	// SET BRR, TE, RE, UE
	USART2->BRR = compute_uart2_bd(APB1_CLK,UART2_BAUDRATE); // 0x445C;
	USART2->CR1 = 0x00;
	USART2->CR1 |= (1<<2);
	USART2->CR1 |= (1<<13);
}

static uint16_t compute_uart2_bd(uint32_t PeriphCLK,uint32_t Baudrate)
{
	return ((PeriphCLK+(Baudrate/2U))/Baudrate);
}

char USART_Read(void)
{
	while(!(USART2->SR & (1<<5)));
	return USART2->DR;
}
