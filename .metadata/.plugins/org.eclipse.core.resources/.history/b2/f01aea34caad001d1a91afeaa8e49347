#include <stm32f4xx.h>
#include <stdint.h>

#define GPIOAEN (1U<<0)
#define UART2EN (1U<<17)

#define SYS_FREQ 16000000
#define APB1_CLK SYS_FREQ
#define UART2_BAUDRATE 115200

#define CR1_TE (1U<<3)
#define CR1_UE (1U<<13)
//#define SR_TXE (1U<<7)



void uart2_tx_init(void);
static uint16_t compute_uart2_bd(uint32_t PeriphCLK,uint32_t Baudrate);
void uart2_write(int ch);

int main(void)
{
	uart2_tx_init();
	while(1)
	{
		uart2_write('M');
		uart2_write('A');
		uart2_write('N');
		uart2_write('I');
		uart2_write(' ');
	}
}

void uart2_tx_init(void)
{
	//Enable clock access to GPIOA

	//*RCC_AHB1ENR |=GPIOBEN;
	RCC->AHB1ENR |=GPIOAEN;

	//Set PB10 mode to alternate function mode

	//*GPIOB_MODER &=~(1U<<20);//Reset 0 in 20th bit
	//*GPIOB_MODER |=(1U<<21);//Set 1 in 6th bit
	GPIOA->MODER &=~(1U<<4);
	GPIOA->MODER |=(1U<<5);
	//Set PB10 alternate function type to UART_TX (AF07)

	/**GPIOB_AFRH  |=(1U<<8);
	*GPIOB_AFRH  |=(1U<<9);
	*GPIOB_AFRH  |=(1U<<10);
	*GPIOB_AFRH  &=~(1U<<11);
*/
	GPIOA-> AFR[0] |=(1U<<8);
	GPIOA-> AFR[0] |=(1U<<9);
	GPIOA-> AFR[0] |=(1U<<10);
	GPIOA-> AFR[0] &=~(1U<<11);

	//Configure the UART module

	//*RCC_APB1ENR |=UART3EN;
	RCC->APB1ENR |=UART2EN;

	//Configure Baud rate

	//*USART3_BRR=compute_uart3_bd(APB1_CLK,UART3_BAUDRATE);
	USART2->BRR=compute_uart2_bd(APB1_CLK,UART2_BAUDRATE);
	// configure transfer direction

	//*USART3_CR1 |=(1U<<3);//Transmitter enable
	//*USART3_CR1 |=(1U<<13);//USART enable
	USART2->CR1 = 0x00;
	USART2->CR1 |=CR1_TE;//Transmitter enable
	USART2->CR1 |=CR1_UE;
}

static uint16_t compute_uart2_bd(uint32_t PeriphCLK,uint32_t Baudrate)
{
	return ((PeriphCLK+(Baudrate/2U))/Baudrate);
}

void uart2_write(int ch)
{
	//Make sure the transmit data register is empty

	  // LOad the Data
	while (!(USART2->SR & (1<<7)))
	{

	}

	//write to transmit data register
	USART2->DR = (ch & 0xFF);

	//*USART2_DR|= 0xFF; //(0x01 & 0xFF);
}



/*
#include <stm32f4xx.h>
#include <RCC_Config.h>
#include <Delay_F407G.h>

#define SYS_FREQ 168000000
#define APB1_CLK SYS_FREQ
#define UART2_BAUDRATE 115200

static uint16_t compute_uart2_bd(uint32_t PeriphCLK,uint32_t Baudrate)
{
	return ((PeriphCLK+(Baudrate/2U))/Baudrate);
}

void USART_Config(void)
{
	// ENABLE GPIOA CLOCK
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

	// PA2 - USART2_TX, PA3 - USART2_RX (AF7)
	// SET THE ALTERNATE FUNCTION LOW REGISTER
	GPIOA->AFR[0] |= ((7<<8) | (7<<12));
	GPIOA->AFR[0] &= ~((1<<11) | (1<<15));

	// SET PINS AS ALTERNATE FUNCTION MODE, TYPE AS PUSH-PULL AND SPEED AS
	GPIOA->MODER |= ((2<<4) | (2<<6));
	// GPIOA->OTYPER &= ~((1<<2) | (1<<3));
	// GPIOA->OSPEEDR |= ((3<<4) | (3<<6));

	// ENABLE USART2 CLOCK
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;

	// SET BRR, TE, RE, UE
	// USART2->BRR |= ((2<<0) | (91<<4));
	USART2->BRR = compute_uart2_bd(APB1_CLK,UART2_BAUDRATE); // 0x445C;
	USART2->CR1 |= (1<<3);
	USART2->CR1 |= (1<<2);
	USART2->CR1 |= (1<<13);
}

void USART_WriteChar(char ch)
{
	while(!(USART2->SR & (1<<7)));
	USART2->DR = (ch & 0xFF);
}

char USART_ReadChar(void)
{
	while(!(USART2->SR & (1<<5)));
	return USART2->DR;
}

int main(void)
{
	SysClockConfig();
	TIM6_Config();
	USART_Config();

	while(1)
	{
		USART_WriteChar('U');
		USART_WriteChar('S');
		USART_WriteChar('A');
		USART_WriteChar('R');
		USART_WriteChar('T');
		Delay_ms(100);
	}
}
*/
