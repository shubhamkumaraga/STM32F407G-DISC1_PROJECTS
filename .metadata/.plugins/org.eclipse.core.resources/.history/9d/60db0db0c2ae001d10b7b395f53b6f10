#include <stm32f4xx.h>

// SPI - AF5, PA4 - SPI1_NSS, PA5 - SPI1_SCK, PA6 - SPI1_MISO, PA7 - SPI1_MOSI
// USING (PA5 as SCK, PA4 as CS, PA6 as SO) FOR MAX6675
#define CS_PIN GPIO_Pin_4
#define CS_PORT GPIOA
#define SCK_PIN GPIO_Pin_5
#define SCK_PORT GPIOA
#define SO_PIN  GPIO_Pin_6
#define SO_PORT GPIOA

void SPI_Config(void);

int main(void)
{

	while(1)
	{

	}
}

void SPI_Config(void)
{
	// ENABLE SPI1 AND GPIOA CLOCK
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

	GPIOA->MODER &= ~(GPIO_MODER_MODER4 | GPIO_MODER_MODER5 | GPIO_MODER_MODER6);
	GPIOA->MODER |= (GPIO_Mode_AF << (GPIO_MODER_MODER4_Pos * 2)) |
					(GPIO_Mode_AF << (GPIO_MODER_MODER5_Pos * 2)) |
					(GPIO_Mode_AF << (GPIO_MODER_MODER6_Pos * 2));
	GPIOA->OSPEEDR |= (GPIO_Speed_50MHz << (GPIO_OSPEEDER_OSPEEDR4_Pos * 2)) |
					  (GPIO_Speed_50MHz << (GPIO_OSPEEDER_OSPEEDR5_Pos * 2)) |
					  (GPIO_Speed_50MHz << (GPIO_OSPEEDER_OSPEEDR6_Pos * 2));
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_5 | GPIO_OTYPER_OT_6);
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR4 | GPIO_PUPDR_PUPDR5 | GPIO_PUPDR_PUPDR6);
	GPIOA->AFR[0] |= (GPIO_AF_SPI1 << (GPIO_AFRL_AFRL4_Pos * 4)) |
					 (GPIO_AF_SPI1 << (GPIO_AFRL_AFRL5_Pos * 4)) |
					 (GPIO_AF_SPI1 << (GPIO_AFRL_AFRL6_Pos * 4));

	// Configure the SPI1 peripheral
	SPI1->CR1 = SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE | SPI_CR1_BR_2 | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI;
	SPI1->CR2 = SPI_CR2_FRXTH | SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2 | SPI_CR2_SSOE | SPI_CR2_NSSP;
	SPI1->CRCPR = 7;

	// Enable the SPI1 peripheral
	SPI1->CR1 |= SPI_CR1_SPE;
}

uint16_t MAX6675_Read_Temp(void)
{
	uint16_t temp;

	// Select MAX6675 by pulling CS pin low
	CS_PORT->BSRRH = CS_PIN;

	// Send dummy byte to start the conversion and read the temperature data
	SPI1->DR = 0x00;
	while ((SPI1->SR & SPI_SR_RXNE) == 0);  // Wait until receive buffer not empty
	temp = SPI1->DR;

	// Send another dummy byte to read the thermocouple temperature data
	SPI1->DR = 0x00;
	while ((SPI1->SR & SPI_SR_RXNE) == 0);
}
